using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace RpgApi.Migrations
{
    /// <inheritdoc />
    public partial class TestMigration : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.UpdateData(
                table: "TB_USUARIOS",
                keyColumn: "Id",
                keyValue: 1,
                columns: new[] { "PasswordHash", "PasswordSalt" },
                values: new object[] { new byte[] { 242, 134, 154, 219, 42, 53, 198, 14, 166, 32, 27, 4, 199, 51, 98, 82, 200, 147, 240, 201, 134, 94, 154, 235, 44, 71, 221, 210, 67, 134, 55, 135, 80, 13, 95, 216, 105, 19, 53, 114, 68, 152, 101, 78, 127, 180, 191, 227, 134, 154, 44, 4, 156, 89, 61, 183, 166, 231, 215, 189, 116, 167, 172, 215 }, new byte[] { 116, 68, 112, 143, 26, 14, 103, 123, 86, 132, 92, 67, 127, 7, 154, 117, 92, 232, 219, 254, 101, 181, 168, 14, 155, 208, 210, 12, 62, 150, 158, 76, 205, 211, 130, 8, 165, 137, 145, 106, 3, 215, 75, 174, 225, 126, 80, 86, 184, 139, 139, 62, 172, 30, 44, 125, 213, 203, 114, 85, 165, 14, 67, 85, 44, 201, 123, 55, 226, 99, 244, 118, 50, 194, 94, 142, 227, 248, 139, 255, 100, 11, 15, 135, 149, 88, 230, 7, 4, 142, 112, 253, 29, 227, 23, 197, 17, 191, 32, 93, 222, 161, 109, 8, 169, 234, 49, 92, 138, 23, 169, 152, 150, 177, 248, 252, 255, 34, 158, 245, 249, 160, 227, 2, 147, 117, 50, 62 } });
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.UpdateData(
                table: "TB_USUARIOS",
                keyColumn: "Id",
                keyValue: 1,
                columns: new[] { "PasswordHash", "PasswordSalt" },
                values: new object[] { new byte[] { 108, 153, 176, 32, 193, 19, 5, 220, 242, 99, 107, 179, 38, 97, 197, 212, 227, 123, 118, 145, 39, 121, 107, 69, 160, 10, 192, 60, 153, 98, 157, 93, 41, 75, 248, 123, 64, 236, 233, 150, 73, 62, 67, 209, 109, 128, 41, 193, 8, 243, 133, 17, 246, 149, 120, 98, 132, 40, 101, 87, 108, 192, 246, 105 }, new byte[] { 119, 198, 240, 164, 255, 249, 255, 48, 115, 201, 9, 100, 208, 140, 241, 156, 123, 39, 63, 31, 158, 220, 135, 107, 218, 38, 89, 233, 120, 38, 233, 79, 193, 17, 129, 235, 182, 107, 101, 18, 251, 75, 215, 28, 154, 25, 11, 64, 2, 91, 239, 234, 18, 115, 214, 77, 73, 245, 94, 170, 138, 161, 5, 50, 44, 225, 19, 217, 236, 105, 199, 151, 228, 81, 234, 49, 156, 172, 94, 192, 123, 55, 31, 23, 119, 102, 234, 55, 251, 147, 198, 95, 255, 112, 160, 229, 44, 69, 127, 193, 103, 233, 141, 193, 104, 170, 238, 158, 238, 121, 31, 75, 69, 248, 32, 149, 11, 178, 250, 201, 195, 24, 214, 248, 147, 235, 146, 248 } });
        }
    }
}
